legend("topleft", fill=1:4, legend=levels(factor(ds$Lcode)))
#Now it's interesting to inspect interaction between lithological variables
isSM = ds$Lcode=="SM"
# check that what have we done is meaningful:
summary(isSM)
table(isSM, ds$Lcode)
# create a gstat object
gs_SM = gstat(id="SM", formula=isSM~1, locations = ~X+Y,
data=cbind(ds, isSM))
# empirical variogram
vg_SM = variogram(gs_SM, cutoff=225)
plot(vg_SM)
# model template
vgt_SM = vgm(psill=0.07, model="Exp", range=60, nugget=0.13)  # try with a periodic variogram
plot(vg_SM, model=vgt_SM)
# fit
vgm_SM = fit.variogram(vg_SM, model = vgt_SM)
plot(vg_SM, model=vgm_SM)
## grid and kriging
# # recreate gstat object with variogram model
# gs_SM = gstat(id="SM", formula=isSM~1, locations = ~X+Y,
#              data=cbind(ds, isSM),
#              model=vgt_SM,
#              nmax=40
#               )
gs_lcode = gstat(id="SM", formula=(Lcode=="SM")~1, locations = ~X+Y,
data=ds,
model=vgt_SM, nmax=60) %>%
gstat(id="FZ", formula=(Lcode=="FZ")~1, locations = ~X+Y,
data=ds,
model=vgt_SM,nmax=60) %>%
gstat(id="UM", formula=(Lcode=="UM")~1, locations = ~X+Y,
data=ds,
model=vgt_SM,nmax=60) %>%
gstat(id="SA", formula=(Lcode=="SA")~1, locations = ~X+Y,
data=ds,
model=vgt_SM,nmax=60)
vg_lcode = variogram(gs_lcode, cutoff=225)
gs_lcode =gstat::fit.lmc(v=vg_lcode, model = vgm_SM,
g = gs_lcode, correct.diagonal = 1.001) # correct.diagonal needed to force positive-definiteness
#plot variograms
plot(vg_lcode, model=gs_lcode$model)
# cockriging
cokr_all = predict(gs_lcode, newdata=xy_grid, debug.level = -1)#,indicators=T
# plot the results
a =ggplot(cokr_all, aes(X, Y))+
geom_raster(aes(fill=SM.pred))+
coord_fixed()+
theme_classic()+
scico::scale_fill_scico(palette = "roma")+ggtitle("SM")
b =ggplot(cokr_all, aes(X, Y))+
geom_raster(aes(fill=FZ.pred))+
coord_fixed()+
theme_classic()+
scico::scale_fill_scico(palette = "roma")+ggtitle("FZ")
c =ggplot(cokr_all, aes(X, Y))+
geom_raster(aes(fill=UM.pred))+
coord_fixed()+
theme_classic()+
scico::scale_fill_scico(palette = "roma")+ggtitle("UM")
d =ggplot(cokr_all, aes(X, Y))+
geom_raster(aes(fill=SA.pred))+
coord_fixed()+
theme_classic()+
scico::scale_fill_scico(palette = "roma")+ggtitle("SA")
gridExtra::grid.arrange(a,b,c,d,nrow=2, ncol=2)
#simulation for Lcodes
#simlcodes = predict(gs_lcode, newdata=xy_grid, debug.level = -1,nsim=100)
# WE use indicators
simlcodes = predict(gs_lcode, newdata=xy_grid, debug.level = -1,indicators=T,nsim=100)
library("manipulate")
all_lcode_simulationplot = function(i,sim_ds){
a=ggplot()+
geom_raster(data=sim_ds,aes( x=X, y=Y,fill=sim_ds[,2+i]))+
coord_fixed()+
theme_classic()+
scico::scale_fill_scico(palette = "bilbao")+
ggtitle(paste(sep="",i," Realisation of SM " ))
b=ggplot()+
geom_raster(data=sim_ds ,aes( x=X, y=Y,fill=sim_ds[,2+i+100]))+
coord_fixed()+
theme_classic()+
scico::scale_fill_scico(palette = "vik")+
ggtitle(paste(sep="",i," Realisation of FZ " ))
c=ggplot()+
geom_raster(data=sim_ds,aes( x=X, y=Y,fill=sim_ds[,2+i+200]))+
coord_fixed()+
theme_classic()+
scico::scale_fill_scico(palette = "lajolla")+
ggtitle(paste(sep="",i," Realisation of  UM" ))
d=ggplot()+
geom_raster(data=sim_ds,aes(x=X, y=Y,fill=sim_ds[,2+i+300]))+
coord_fixed()+
theme_classic()+
scico::scale_fill_scico(palette = "bilbao")+
ggtitle(paste(sep="",i," Realisation of SA " ))
gridExtra::grid.arrange(a, b,c,d,nrow=2,ncol=2) #set the number of plots
}
manipulate(all_lcode_simulationplot(i,simlcodes), i=slider(1,100))
save.image("U:/STUDY/blockkurs/2022/Ibadullaev/fu.RData")
save.image("U:/STUDY/blockkurs/2022/Ibadullaev/fu.RData")
save.image("U:/STUDY/blockkurs/2022/Ibadullaev/fu.RData")
## Lcode + Co
(mat = matrix(c(1,2,1,3), ncol=2))
layout(mat, height=c(2,3))  # alternative to par(mfrow=...)
(lvl = abbreviate(levels(ds$Lcode))) # useful later
# rock type vs logCo
plot(log(Co)~Lcode, data=ds, border=1:5)
## Apparently, Co is lowest in FZ, lower in UM,
#  average in SM  and highest in
#  SA. There is a dependence between CO and lithology!
#  Given these results +  low number of data in Portlandian:
#convert categorical values to integers
ds$lithcode =
ds$Lcode %>% # take the original Lcode
as.integer %>%   # convert the categories to integers (==position in the lvl vector)
factor(labels=c("FZ", "SA", "SM", "UM"))
# check the operation was well done
summary(ds$lithcode)
table(ds$lithcode, ds$Lcode)
contrasts(ds$lithcode) <- contr.treatment(levels(ds$lithcode), base=2)
# check the effect: (if necessary, read ?contr.treatment)
ds$lithcode
contr.treatment(levels(ds$lithcode), base=2) %>%
{lm(log(Co)~lithcode, data=ds, contrasts=.)} %>% summary
## multivariate model for Co and lcode together
gs_Co4lcodes = gstat(id="Co", formula=log(Co)~1, locations = ~X+Y,
data=ds, nmax=50) %>%
gstat(id="FZ", formula=(lithcode=="FZ")~1, locations = ~X+Y,
data=ds, nmax=50) %>%
gstat(id="SA", formula=(lithcode=="SA")~1, locations = ~X+Y,
data=ds, nmax=50) %>%
gstat(id="UM", formula=(lithcode=="UM")~1, locations = ~X+Y,
data=ds, nmax=50)
par(mfrow=c(1,1))
# empirical variogram
vg_Co4lcodes = variogram(gs_Co4lcodes, cutoff=225)
plot(vg_Co4lcodes)
# variogram model
# let's start with the model for Ni, without nugget
# adding the wave model of Tuesday
vgt = vgm(model="Sph", range=100,nugget = 0.2 ,psill=0.05)
# you can also try switching in and out some of the components and slightly move ranges
gs_Co4lcodes = gstat::fit.lmc(v=vg_Co4lcodes, model=vgt, g=gs_Co4lcodes, correct.diagonal = 1.0001)
plot(vg_Co4lcodes, model=gs_Co4lcodes$model)
# vectors of x and y coordinates of the grid nodes,
#   covering the range of the data, and with a step
#   allowing for interpolation between data
par(mfrow=c(1,1))
plot(Y~X, data=ds, asp=1)
xx = seq(from=rangesXY[1,"X"], to=rangesXY[2,"X"],by=10, length.out = length(ds$X))
## multivariate model for Co and lcode together
gs_Co4lcodes = gstat(id="Co", formula=log(Co)~1, locations = ~X+Y,
data=ds, nmax=50) %>%
gstat(id="FZ", formula=(lithcode=="FZ")~1, locations = ~X+Y,
data=ds, nmax=50) %>%
gstat(id="SA", formula=(lithcode=="SA")~1, locations = ~X+Y,
data=ds, nmax=50) %>%
gstat(id="UM", formula=(lithcode=="UM")~1, locations = ~X+Y,
data=ds, nmax=50)
par(mfrow=c(1,1))
# empirical variogram
vg_Co4lcodes = variogram(gs_Co4lcodes, cutoff=225)
plot(vg_Co4lcodes)
# variogram model
# let's start with the model for Ni, without nugget
# adding the wave model of Tuesday
vgt = vgm(model="Sph", range=100,nugget = 0.2 ,psill=0.05)
# you can also try switching in and out some of the components and slightly move ranges
gs_Co4lcodes = gstat::fit.lmc(v=vg_Co4lcodes, model=vgt, g=gs_Co4lcodes, correct.diagonal = 1.0001)
plot(vg_Co4lcodes, model=gs_Co4lcodes$model)
# vectors of x and y coordinates of the grid nodes,
#   covering the range of the data, and with a step
#   allowing for interpolation between data
par(mfrow=c(1,1))
plot(Y~X, data=ds, asp=1)
xx = seq(from=rangesXY[1,"X"], to=rangesXY[2,"X"], length.out = length(ds$X))
yy = seq(from=rangesXY[1,"Y"], to=rangesXY[2,"Y"], length.out = length(ds$X))
# 4 points
# grid definition must be the same in gs object Easting=x, Northing=y
xxyy_grid = expand.grid(X=xx, Y=yy)
points(xxyy_grid,col=2,pch=".")
xv_Co4lcodes = gstat.cv(gs_Co4lcodes)
## multivariate model for Co and lcode together
gs_Co4lcodes = gstat(id="Co", formula=log(Co)~1, locations = ~X+Y,
data=ds, nmax=50) %>%
gstat(id="FZ", formula=(lithcode=="FZ")~1, locations = ~X+Y,
data=ds, nmax=50) %>%
gstat(id="SA", formula=(lithcode=="SA")~1, locations = ~X+Y,
data=ds, nmax=50) %>%
gstat(id="UM", formula=(lithcode=="UM")~1, locations = ~X+Y,
data=ds, nmax=50)
par(mfrow=c(1,1))
# empirical variogram
vg_Co4lcodes = variogram(gs_Co4lcodes, cutoff=225)
plot(vg_Co4lcodes)
# variogram model
# let's start with the model for Ni, without nugget
# adding the wave model of Tuesday
vgt = vgm(model="Sph", range=100,nugget = 0.2 ,psill=0.05)
# you can also try switching in and out some of the components and slightly move ranges
gs_Co4lcodes = gstat::fit.lmc(v=vg_Co4lcodes, model=vgt, g=gs_Co4lcodes, correct.diagonal = 1.0001)
plot(vg_Co4lcodes, model=gs_Co4lcodes$model)
# vectors of x and y coordinates of the grid nodes,
#   covering the range of the data, and with a step
#   allowing for interpolation between data
par(mfrow=c(1,1))
plot(Y~X, data=ds, asp=1)
xx = seq(from=rangesXY[1,"X"], to=rangesXY[2,"X"], length.out = length(ds$X))
yy = seq(from=rangesXY[1,"Y"], to=rangesXY[2,"Y"], length.out = length(ds$X))
# 4 points
# grid definition must be the same in gs object Easting=x, Northing=y
xxyy_grid = expand.grid(X=xx, Y=yy)
points(xxyy_grid,col=2,pch=".")
xv_Co4lcodes = gstat.cv(gs_Co4lcodes)
# cokriging
cok_Co4lcodes = predict(gs_Co4lcodes, newdata=xxyy_grid, debug.level = -1)
myplot = function(x, variable, breaks=10, colorscale=RColorBrewer::brewer.pal(11, "Spectral")){
# allow for giving specific breaks or the desired number of breaks
if(length(breaks)==1){
breaks = pretty(x[,variable], n = breaks)
}
# ensure that the color scale has always one color less than breaks
if(length(breaks)-length(colorscale)!=1){
colorscale = colorRampPalette(colorscale)(length(breaks)-1)
}
# plot
cols = colorscale[cut(as.numeric(x[,variable]), breaks = breaks)]
plot(Y~X, data=x, bg=cols, col=NA, asp=1, pch=22)
invisible(list(breaks=breaks, color=colorscale)) # return invisibly the elements of the legend
}
par(mfrow=c(3,3))
#1
myplot(cok_Co4lcodes, variable = "Co.pred");
title("Co.pred")
#2
myplot(cok_Co4lcodes, variable = "FZ.pred",breaks =c(-2,0,0.25,0.5,1,2));
title("FZ.pred")
myplot(cok_Co4lcodes, variable = "SA.pred",breaks =c(-2,0,0.25,0.5,1,2));
title("SA.pred")
myplot(cok_Co4lcodes, variable = "UM.pred",breaks =c(-2,0,0.25,0.5,1,2));
title("UM.pred")
#red is negative or zero, orange 0 and 0.25, yellow transition zone, blue , 1 and 2 dark blue-the highest prob
#3
cok_Co4lcodes$SM.pred = 1 -cok_Co4lcodes$FZ.pred -cok_Co4lcodes$SA.pred-cok_Co4lcodes$UM.pred
myplot(cok_Co4lcodes, variable = "SM.pred",breaks =c(-2,0,0.25,0.5,1,2));
title("SM.pred")
#4
mostProb=cok_Co4lcodes[,c(5,7,9,17)] %>% apply(1, which.max)
cok_Co4lcodes$Lcode.pred =mostProb
myplot(cok_Co4lcodes, variable = "Lcode.pred",breaks =c(0,1.5,2.5,3.5,4.5),col=1:4);
title("The most probable")
myplot(ds, variable = "Lcode",breaks =c(0,1.5,2.5,3.5,4.5),col=1:4);
title("The truth")
# for Ni
## multivariate model for Ni and lcodes together
gs_Ni4lcodes = gstat(id="Ni", formula=log(Ni)~1, locations = ~X+Y,
data=ds, nmax=50) %>%
gstat(id="FZ", formula=(lithcode=="FZ")~1, locations = ~X+Y,
data=ds, nmax=50) %>%
gstat(id="SA", formula=(lithcode=="SA")~1, locations = ~X+Y,
data=ds, nmax=50) %>%
gstat(id="UM", formula=(lithcode=="UM")~1, locations = ~X+Y,
data=ds, nmax=50)
par(mfrow=c(1,1))
# empirical variogram
vg_Ni4lcodes = variogram(gs_Ni4lcodes, cutoff=225)
plot(vg_Ni4lcodes)
# variogram model
# let's start with the model for Ni, without nugget
# adding the wave model of Tuesday
vgt = vgm(model="Sph", range=100,nugget = 0.2 ,psill=0.05)
# you can also try switching in and out some of the components and slightly move ranges
gs_Ni4lcodes = gstat::fit.lmc(v=vg_Ni4lcodes, model=vgt, g=gs_Ni4lcodes, correct.diagonal = 1.0001)
plot(vg_Ni4lcodes, model=gs_Ni4lcodes$model)
# vectors of x and y coordinates of the grid nodes,
#   covering the range of the data, and with a step
#   allowing for interpolation between data
par(mfrow=c(1,1))
plot(Y~X, data=ds, asp=1)
xx = seq(from=rangesXY[1,"X"], to=rangesXY[2,"X"], length.out = length(ds$X))
yy = seq(from=rangesXY[1,"Y"], to=rangesXY[2,"Y"], length.out = length(ds$X))
# 4 points
# grid definition must be the same in gs object Easting=x, Northing=y
xxyy_grid = expand.grid(X=xx, Y=yy)
points(xxyy_grid,col=2,pch=".")
xv_Ni4lcodes = gstat.cv(gs_Ni4lcodes)
# cokriging
cok_Ni4lcodes = predict(gs_Ni4lcodes, newdata=xxyy_grid, debug.level = -1)
myplot = function(x, variable, breaks=10, colorscale=RColorBrewer::brewer.pal(11, "Spectral")){
# allow for giving specific breaks or the desired number of breaks
if(length(breaks)==1){
breaks = pretty(x[,variable], n = breaks)
}
# ensure that the color scale has always one color less than breaks
if(length(breaks)-length(colorscale)!=1){
colorscale = colorRampPalette(colorscale)(length(breaks)-1)
}
# plot
cols = colorscale[cut(as.numeric(x[,variable]), breaks = breaks)]
plot(Y~X, data=x, bg=cols, col=NA, asp=1, pch=22)
invisible(list(breaks=breaks, color=colorscale)) # return invisibly the elements of the legend
}
par(mfrow=c(3,3))
#1
myplot(cok_Ni4lcodes, variable = "Ni.pred");
title("Ni.pred")
#2
myplot(cok_Ni4lcodes, variable = "FZ.pred",breaks =c(-2,0,0.25,0.5,1,2));
title("FZ.pred")
myplot(cok_Ni4lcodes, variable = "SA.pred",breaks =c(-2,0,0.25,0.5,1,2));
title("SA.pred")
myplot(cok_Ni4lcodes, variable = "UM.pred",breaks =c(-2,0,0.25,0.5,1,2));
title("UM.pred")
#red is negative or zero, orange 0 and 0.25, yellow transition zone, blue , 1 and 2 dark blue-the highest prob
#3
cok_Ni4lcodes$SM.pred = 1 -cok_Ni4lcodes$FZ.pred -cok_Ni4lcodes$SA.pred-cok_Ni4lcodes$UM.pred
myplot(cok_Ni4lcodes, variable = "SM.pred",breaks =c(-2,0,0.25,0.5,1,2));
title("SM.pred")
#4
mostProb=cok_Ni4lcodes[,c(5,7,9,17)] %>% apply(1, which.max)
cok_Ni4lcodes$Lcode.pred =mostProb
myplot(cok_Ni4lcodes, variable = "Lcode.pred",breaks =c(0,1.5,2.5,3.5,4.5),col=1:4);
title("The most probable")
myplot(ds, variable = "Lcode",breaks =c(0,1.5,2.5,3.5,4.5),col=1:4);
title("The truth")
legend("bottomright",legend = levels(ds$Lcode), col = 1:4)
save.image("U:/STUDY/blockkurs/2022/Ibadullaev/fu.RData")
ds = read.csv("Ibadullaev.csv",stringsAsFactors = T) # load data
colnames(ds) # check cols
ds = ds[,-1] # clip 1st col
colnames(ds) # check cols
ds = read.csv("Ibadullaev.csv",stringsAsFactors = T) # load data
colnames(ds) # check cols
ds = ds[,-1] # clip 1st col
colnames(ds) # check cols
# Import Packages
library("gstat")
library("RColorBrewer")
library("magrittr")
library("ggplot2")
library("manipulate")
library("sp")
library("scico")
library("dplyr")
library("gmGeostats")
library("knitr")
library("rstudioapi")
setwd(dirname(getActiveDocumentContext()$path)) # Set active directory
getwd()
```{r showsimlcodes}
all_lcode_simulationplot(i=30,simlcodes)
allsimulationplot(15,cosim_l,n=20)
allsimulationplot(15,cosim_l,n=20)
#manipulate(simulationplot(i,sim_Co,varname="Co"), i=slider(1,100))
simulationplot(i=30,sim_Co,varname="Co")
#manipulate(simulationplot(i,sim_Ni,varname="Ni"), i=slider(1,100))
simulationplot(i=25,sim_Ni,varname="Ni")
library("sp")
library("raster")
library("rgdal")
library("ggplot2")
library("gridExtra")
library("RStoolbox")
library(RColorBrewer)
library(rstudioapi)
setwd(dirname(getActiveDocumentContext()$path))
getwd()
# create a list of import raster layers or bands
rlist = list.files(getwd(), pattern="img$", full.names = TRUE)
# combine and stack layers
costz31_12_84 = stack(rlist)
# check attributes
costz31_12_84
# dipslay img
plotRGB(costz31_12_84, r =5, g=4,b=3, stretch="lin")
VI_12_84 <- spectralIndices(costz31_12_84,
red = "Layer_3",
nir = "Layer_4",
indices = c("NDVI", "SAVI", "MSAVI"))
VI_12_84
# check attributes
costz31_12_84
VI_12_84 <- spectralIndices(costz31_12_84,
red = "CostzPr_31_12_84.3",
nir = "CostzPr_31_12_84.4",
indices = c("NDVI", "SAVI", "MSAVI"))
VI_12_84
display.brewer.all()
VI_palette = brewer.pal(n=10,name = "PiYG")
spplot(VI_12_84, col.regions = VI_palette, cuts = 6,
col="transparent")
#save
writeRaster(VI_12_84$NDVI, "NDVI_12_84.img", datatype='FLT4S',
overwrite = TRUE)
writeRaster(VI_12_84$MSAVI, "MSAVI_12_84.img", datatype='FLT4S',
overwrite = TRUE)
writeRaster(VI_12_84$SAVI, "SAVI_12_84.img", datatype='FLT4S',
overwrite = TRUE)
install.packages("glcm")
library(glcm)
# list of raster layers
rlist2 = list.files(getwd(), pattern = "img$",
full.names = TRUE)
# stack layers
costz12_84_2=stack(rlist2)
#install.packages("glcm")
library(glcm)
# list of raster layers
rlist2 = list.files(getwd(), pattern = "img$",
full.names = TRUE)
# stack layers
costz12_84_2=stack(rlist2)
costz12_84_2
plotRGB(costz12_84_2, r=5, g=4, b=3,stretch="lin")
glcm31_12_84.4 = glcm(raster(costz12_84_2, layer=4),
window = c(3,3),
statistics = c("mean","variance",
"homogeneity",
"entropy"))
#display
plot(glcm31_12_84.4)
plotRGB(costz12_84_2, r=5, g=4, b=3,stretch="lin")
glcm31_12_84.4 = glcm(raster(costz12_84_2, layer=4),
window = c(3,3),
statistics = c("mean","variance",
"homogeneity",
"entropy"))
#display
plot(glcm31_12_84.4)
writeRaster(glcm31_12_84.4$glcm_mean, "glcm_mean31_12_84_b4.img", datatype='FLT4S',
overwrite = TRUE)
writeRaster(glcm31_12_84.4$glcm_variance, "glcm_variance31_12_84_b4.img", datatype='FLT4S',
overwrite = TRUE)
writeRaster(glcm31_12_84.4$glcm_entropy, "glcm_entropy31_12_84_b4.img", datatype='FLT4S',
overwrite = TRUE)
writeRaster(glcm31_12_84.4$glcm_homogeneity, "glcm_homogeneity31_12_84_b4.img", datatype='FLT4S',
overwrite = TRUE)
glcm31_12_84.5 = glcm(raster(costz12_84_2, layer=5),
window = c(3,3),
statistics = c("mean","variance",
"homogeneity",
"entropy"))
#display
plot(glcm31_12_84.5)
writeRaster(glcm_31_12_84.5$glcm_mean, "glcm_mean_31_12_84_b5.img", datatype='FLT4S',
overwrite = TRUE)
writeRaster(glcm_31_12_84.5$glcm_variance, "glcm_variance_31_12_84_b5.img", datatype='FLT4S',
overwrite = TRUE)
writeRaster(glcm_31_12_84.5$glcm_entropy, "glcm_entropy_31_12_84_b5.img", datatype='FLT4S',
overwrite = TRUE)
writeRaster(glcm_31_12_84.5$glcm_homogeneity, "glcm_homogeneity_31_12_84_b5.img", datatype='FLT4S',
overwrite = TRUE)
glcm31_12_84.5 = glcm(raster(costz12_84_2, layer=5),
window = c(3,3),
statistics = c("mean","variance",
"homogeneity",
"entropy"))
#display
plot(glcm31_12_84.5)
writeRaster(glcm_31_12_84.5$glcm_mean, "glcm_mean_31_12_84_b5.img", datatype='FLT4S',
overwrite = TRUE)
writeRaster(glcm_31_12_84.5$glcm_mean, "glcm_mean_31_12_84_b5.img", datatype='FLT4S',
overwrite = TRUE)
writeRaster(glcm31_12_84.5$glcm_mean, "glcm_mean_31_12_84_b5.img", datatype='FLT4S',
overwrite = TRUE)
writeRaster(glcm31_12_84.5$glcm_variance, "glcm_variance_31_12_84_b5.img", datatype='FLT4S',
overwrite = TRUE)
writeRaster(glcm31_12_84.5$glcm_entropy, "glcm_entropy_31_12_84_b5.img", datatype='FLT4S',
overwrite = TRUE)
writeRaster(glcm31_12_84.5$glcm_homogeneity, "glcm_homogeneity_31_12_84_b5.img", datatype='FLT4S',
overwrite = TRUE)
glcm31_12_84.7 = glcm(raster(costz31_12_84_2, layer=7),
window = c(3,3),
statistics = c("mean","variance",
"homogeneity",
"entropy"))
#display
plot(glcm31_12_84.7)
writeRaster(glcm31_12_84.7$glcm_mean, "glcm_mean_31_12_84_b7.img", datatype='FLT4S',
overwrite = TRUE)
writeRaster(glcm31_12_84.7$glcm_variance, "glcm_variance_31_12_84_b7.img", datatype='FLT4S',
overwrite = TRUE)
writeRaster(glcm31_12_84.7$glcm_entropy, "glcm_entropy_31_12_84_b7.img", datatype='FLT4S',
overwrite = TRUE)
writeRaster(glcm31_12_84.7$glcm_homogeneity, "glcm_homogeneity_31_12_84_b7.img", datatype='FLT4S',
overwrite = TRUE)
glcm31_12_84.7 = glcm(raster(costz31_12_84_2, layer=7),
window = c(3,3),
statistics = c("mean","variance",
"homogeneity",
"entropy"))
glcm31_12_84.7 = glcm(raster(costz_12_84_2, layer=7),
window = c(3,3),
statistics = c("mean","variance",
"homogeneity",
"entropy"))
glcm31_12_84.7 = glcm(raster(costz12_84_2, layer=7),
window = c(3,3),
statistics = c("mean","variance",
"homogeneity",
"entropy"))
#display
plot(glcm31_12_84.7)
writeRaster(glcm31_12_84.7$glcm_mean, "glcm_mean_31_12_84_b7.img", datatype='FLT4S',
overwrite = TRUE)
writeRaster(glcm31_12_84.7$glcm_variance, "glcm_variance_31_12_84_b7.img", datatype='FLT4S',
overwrite = TRUE)
writeRaster(glcm31_12_84.7$glcm_entropy, "glcm_entropy_31_12_84_b7.img", datatype='FLT4S',
overwrite = TRUE)
writeRaster(glcm31_12_84.7$glcm_homogeneity, "glcm_homogeneity_31_12_84_b7.img", datatype='FLT4S',
overwrite = TRUE)
